#ORDENA√á√ÉO
#S√£o algoritmos utilizados para ordernar diferentes tipos de dados. Existem diferentes tipos de ordena√ß√£o que servem para determinados contextos e devem ser escolhidos com cuidado
#Problema geral: recebe uma lista n√£o ordenada, a qual utilizaremos o algoritmo para ordenar e resultar numa sa√≠da crescente ou decrescente

#Esses algoritmos geralmente possuem uma Invariante de la√ßo.
#Invariante de la√ßo - Uma invariante de la√ßo no contexto de algoritmos de ordena√ß√£o √© uma propriedade l√≥gica que permanece verdadeira em todas as itera√ß√µes de um la√ßo (loop) durante a execu√ß√£o do algoritmo. Ela √© usada para demonstrar a corre√ß√£o do algoritmo, ou seja, para mostrar que ele realmente faz o que se prop√µe a fazer.
# üìå Como funciona a ideia?
# Quando analisamos um algoritmo com la√ßos (como for, while), identificamos uma invariante que:
# √â verdadeira antes da primeira itera√ß√£o (inicializa√ß√£o),
# Permanece verdadeira ap√≥s cada itera√ß√£o (manuten√ß√£o),
# Nos ajuda a concluir que o algoritmo est√° correto ao final do la√ßo (t√©rmino).
# ‚úÖ Por que isso √© importante?
# Ajuda a provar a corre√ß√£o do algoritmo.
# Facilita o entendimento do que o la√ßo est√° garantindo a cada itera√ß√£o.
#--------------------------------------------------------------------------------------------------------------------------------------------------

#BUBBLE-SORT
#Invariante de la√ßo do Bubble-sort: Na itera√ß√£o i, os ultimos i elementos s√£o os maiores e est√£o ordenados. √â verdadeira no come√ßo para i igual a 0, manteremos ela ordenada no meio e isso resultar√° em n ultimos elementos ordenados (todos os elementos do vetor).
#Nesse algoritmo vamos comparando elementos dois a dois e se tiverem na ordem errada, s√£o trocados entre si. O maior valor √© sempre trocado at√© chegar no final, pois se ele √© o maior valor do vetor sempre que for comparado com algu√©m ele ir√° ser jogado ao fim do vetor. Ele repete o processo a cada itera√ß√£o, ent√£o ap√≥s cada itera√ß√£o do loop iremos reduzir o tamanho da lista a ser ordenada, pois a cada passada teremos garantia que o os ultimos elementos s√£o os maiores e est√£o ordenados. No fim isso resulta num vetor todo ordenado pois ao chegar nos 2 primeiros valores da lista, ao compar√°-los entre si e serem trocados, resulta no vetor ordenado pois o primeiro elemento ser√° o menor e n√£o temos mais com quem compar√°-lo.
#Se chama bubble-sort pois os elementos mais leves da lista 'flutuam' (ficam no inicio) e os mais pesados caem pra baixo (final da lista), as itera√ß√µes e trocas s√£o chamadas de borbulhas.

#IMPLEMENTA√á√ÉO BUBBLE SORT
def bubble_sort(lista): #recebe a lista desordenada a qual vamos ordenar
    k = len(lista) - 1 #guardamos a ultima posi√ß√£o da lista, que √© por onde vamos come√ßar as trocas
    for i in range(k, 0, -1): #√© o for que controla o tamanho da lista que estamos verificando, a cada itera√ß√£o o tamanho da lista diminui pois ja inserimos um valor maior ao final da lista na posi√ß√£o correta
        trocou = False #verifica na primeira passada se a lista ja est√° ordenada ou n√£o
        for j in range(0, i, 1): #esse √© o for que controla as compara√ß√µes de fato e ele vai at√© i que √© o tamanho da lista naquele momento
            if lista[j] > lista[j+1]: #se o elemento atual for maior que seu  pr√≥mixo, eles precisam ser trocados
                aux = lista[j] #fazemos a troca com uma vari√°vel auxiliar
                lista[j] = lista[j+1]
                lista[j+1] = aux #passando o maior valor para o final da lista
                trocou = True #caso caia aqui √© pq a lista n√£o estava ordenada e trocas foram feitas
        if trocou == False: #se n√£o trocou nada, o trocou permanece false e s√≥ √© feita uma verifica√ß√£o, o que significa que a lista ja estava ordenada
            return #portanto podemos encerrar a fun√ß√£o aqui, pois n√£o precisamos perder tempo com o resto ja que a lista ja est√° ordenada

lista = [5, 99, 13, 18, 1, 30] #testando a ordena√ß√£o da fun√ß√£o
bubble_sort(lista)
print(lista)
#--------------------------------------------------------------------------------------------------------------------------------------------------

#INSERTION SORT
#Esse algoritmo deixa um peda√ßo do vetor ordenado (geralmente o inicio do vetor), ou seja, √© como se divid√≠ssimos o vetor em uma parte que ja foi ordenada no in√≠cio e o restante √© o que ainda n√£o verificamos. Ele funciona pegando o primeiro elemento da lista, que sozinho j√° assumimos como um vetor ordenado, e ent√£o inserimos o pr√≥ximo valor nesse vetor inicialmente ordenado e comparamos o valor inserido com os que ja estavam na parte ordenada e assim realizamos trocas caso este valo inserido seja menor que algum dos que ja estavam l√°, ou seja, puxamos ele para a sua posi√ß√£o correta no come√ßo da lista.
#Fazemos isso at√© chegar no ultimo elemento da lista a ser inserido e posicionado corretamente
#Invariante de la√ßo do Insertion-Sort: na i-√©sima itera√ß√£o os i primeiros termos est√£o ordenados, ent√£o a lista toda estar√° ordenada na i-√©sima itera√ß√£o
#√â um algoritmo que possui um desempenho melhor quando o vetor √© pequeno.

#IMPLEMENTA√á√ÉO DO INSERTION SORT
def insertion_sort(lista):#recebe a lista desordenada a qual vamos ordenar
    for i in range(1, len(lista)): #come√ßa em 1 pois assumimos que o primeiro elemento da lista (lista[0]) ja est√° ordenado por estar sozinho, ent√£o vamos come√ßar a inserir o segundo elemento (lista[1])
        j = i  #√© o elemento que est√°  sendo inserido na lista e que precisa ser comparado com os anteriores
        valor = lista[j] #utilizamos um auxiliar para guardar o valor desse elemento 
        while j > 0 and lista[j -1] > valor: #Enquanto j for maior que 0 e o valor do anterior for maior que o valor que queremos inserir
            #ent√£o as trocas precisam ser feitas e lista[j-1] (elemento anterior) precisa ir pra direita
            lista[j] = lista[j-1] #ent√£o fazemos a posi√ß√£o que estava o elemento que queremos inserir, receber o valor do elemento anterior
            j = j - 1 #e decrescemos j para que esse looping v√° at√© o come√ßo da lista, fazendo com que o elemento que estamos inserindo caminhe at√© que esteja em sua posi√ß√£o correta
        lista[j] = valor #por fim atribu√≠mos o valor a ser inserido na posi√ß√£o correta


lista = [5, 99, 13, 18, 1, 30] #testando a ordena√ß√£o da fun√ß√£o
insertion_sort(lista)
print(lista)
#--------------------------------------------------------------------------------------------------------------------------------------------------

#SELECTION SORT
#Este algoritmo consiste em percorrer a lista procurando o menor valor dela e inseri-lo nas primeiras posi√ß√µes da lista. A cada itera√ß√£o do for vamos diminuindo o tamanho da lista a ser verificada pois os primeiros elementos dela temos garantia de que ja est√£o ordenados, pois a cada passada inserimos o menor numero envontrado naquele momento na parte da lista que j√° est√° ordenada. Podemos fazer isso considerando o menor valor ou o maior valor.
#Invariante de la√ßo do Selection-Sort: os i primeiros termos s√£o os menores e est√£o ordenados, e percorremos o que sobrou da lista procurando o menor valor novamente e para coloc√°-lo na lista ja ordenada, fazendo com que na i-√©sima itera√ß√£o os i primeiros termos est√£o ordenados (todos os elementos da lista)
#Se chama selection-sort pois seleciona o menor ou maior valor da lista e o coloca na sua posi√ß√£o correta

#IMPLEMENTA√á√ÉO SELECTION-SORT
def selection_sort(lista): #recebe a lista desordenada a qual vamos ordenar
    for i in range(len(lista)): #percorre a lista toda de 0 at√© o fim dela, √© usado para pegar o elemento atual a ser comparado e √© a posi√ß√£o onde vamos inserir esse elemento c=de menor valor que vamos achar
        indice_menor = i #guardamos o indice da menor posi√ß√£o para fazermos as trocas e inicialmente assumimos que o menor valor √© o primeiro da lista (lista[0])
        for j in range(i+1, len(lista)): #iniciamos portanto o for da compora√ß√£o a partir do lista[1], que √© usado pra pegar o elemento que ser√° comparado com o i(atual), o j seria a lista que vai ser comparada com o i exceto o pr√≥prio i
            if lista[j] < lista[indice_menor]: #verifica se o restante da lista √© < que o atual menor e se for, o indice do menor ser√° atualizado
                indice_menor = j #atualiza o indice do menor para o do menor valor q achou no momento
        aux = lista[i] #fazemos a troca desse elementos, guardando o valor do que estava no come√ßo da lista no momento
        lista[i] = lista[indice_menor] #inserindo o valor do que estava no indice que encontramos como o menor valor no inicio da lista
        lista[indice_menor] = aux #e colocando o valor do que estava no inicio da lista no lugar de onde estava o menor valor que encontramos
        

lista = [5, 99, 13, 18, 1, 30] #testando a ordena√ß√£o da fun√ß√£o
selection_sort(lista)
print(lista)